[
  {
    "objectID": "cloudstorage.html",
    "href": "cloudstorage.html",
    "title": "Cloud storage",
    "section": "",
    "text": "We recommend to set the following OS environment variables: - RIBASIM_NL_CLOUD_PASS: password for the cloud, to be requested at Deltares - RIBASIM_NL_DATA_DIR: directory with your local copy of data in the Ribasim-NL cloud\n\n\n\nImport the `Cloud`` and initialize it\nfrom ribasim_nl import CloudStorage\nIf you have set OS environment variables:\ncloud_store = CloudStorage()\nAnd else\ncloud_storage = CloudStorage(password=password, data_dir=my_data_dir)\n\n\n\nFind all sources\n# find all sources, `PBL_watertypenkaart`\nsources = cloud_storage.source_data\n# download, `PBL_watertypenkaart`\ncloud.download_basisgegevens(bronnen=[\"PBL_watertypenkaart\"])\n\n\n\nTo find available water authorities:\ncloud_storage.water_authorities\n\n\n\nauthority = \"Rijkswaterstaat\"\n\n# to download external data (aangeleverd) only\ncloud_storage.download_aangeleverd(authority)\n\n# to download manipulated data (verwerkt) only\ncloud_storage.download_verwerkt(authority)\n\n# to download all\ncloud_storage.download_all(authority)\n\n\n\nauthority = \"Rijkswaterstaat\"\n# upload local `aangeleverd` directory to cloud-storage\ncloud_storage.upload_aangeleverd(authority, overwrite=True)\n\n\n\nauthority = \"Rijkswaterstaat\"\ncloud_storage.uploaded_models(authority) # to see which models have been uploaded\n\ncloud_storage.upload_model(authority, model=\"ijsselmeer\") # to upload a new version of the `ijsselmeermodel`."
  },
  {
    "objectID": "cloudstorage.html#os-environment-variables",
    "href": "cloudstorage.html#os-environment-variables",
    "title": "Cloud storage",
    "section": "",
    "text": "We recommend to set the following OS environment variables: - RIBASIM_NL_CLOUD_PASS: password for the cloud, to be requested at Deltares - RIBASIM_NL_DATA_DIR: directory with your local copy of data in the Ribasim-NL cloud"
  },
  {
    "objectID": "cloudstorage.html#initialize-the-cloud",
    "href": "cloudstorage.html#initialize-the-cloud",
    "title": "Cloud storage",
    "section": "",
    "text": "Import the `Cloud`` and initialize it\nfrom ribasim_nl import CloudStorage\nIf you have set OS environment variables:\ncloud_store = CloudStorage()\nAnd else\ncloud_storage = CloudStorage(password=password, data_dir=my_data_dir)"
  },
  {
    "objectID": "cloudstorage.html#download-sources-basisgegevens",
    "href": "cloudstorage.html#download-sources-basisgegevens",
    "title": "Cloud storage",
    "section": "",
    "text": "Find all sources\n# find all sources, `PBL_watertypenkaart`\nsources = cloud_storage.source_data\n# download, `PBL_watertypenkaart`\ncloud.download_basisgegevens(bronnen=[\"PBL_watertypenkaart\"])"
  },
  {
    "objectID": "cloudstorage.html#find-water-authorities",
    "href": "cloudstorage.html#find-water-authorities",
    "title": "Cloud storage",
    "section": "",
    "text": "To find available water authorities:\ncloud_storage.water_authorities"
  },
  {
    "objectID": "cloudstorage.html#download-water-authority-datasets",
    "href": "cloudstorage.html#download-water-authority-datasets",
    "title": "Cloud storage",
    "section": "",
    "text": "authority = \"Rijkswaterstaat\"\n\n# to download external data (aangeleverd) only\ncloud_storage.download_aangeleverd(authority)\n\n# to download manipulated data (verwerkt) only\ncloud_storage.download_verwerkt(authority)\n\n# to download all\ncloud_storage.download_all(authority)"
  },
  {
    "objectID": "cloudstorage.html#upload-manipulated-data-aangeleverd",
    "href": "cloudstorage.html#upload-manipulated-data-aangeleverd",
    "title": "Cloud storage",
    "section": "",
    "text": "authority = \"Rijkswaterstaat\"\n# upload local `aangeleverd` directory to cloud-storage\ncloud_storage.upload_aangeleverd(authority, overwrite=True)"
  },
  {
    "objectID": "cloudstorage.html#upload-models",
    "href": "cloudstorage.html#upload-models",
    "title": "Cloud storage",
    "section": "",
    "text": "authority = \"Rijkswaterstaat\"\ncloud_storage.uploaded_models(authority) # to see which models have been uploaded\n\ncloud_storage.upload_model(authority, model=\"ijsselmeer\") # to upload a new version of the `ijsselmeermodel`."
  },
  {
    "objectID": "reference/possibly_intersecting.html",
    "href": "reference/possibly_intersecting.html",
    "title": "possibly_intersecting",
    "section": "",
    "text": "possibly_intersecting(dataframebounds, geometry, buffer=0)\nEfficiently determine possibly intersecting geometries using a bounding box.\nFinding intersecting profiles for each branch is a slow process in case of large datasets To speed this up, we first determine which profile intersect a square box around the branch With the selection, the intersecting profiles can be determines much faster.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndataframebounds\nnumpy.numpy.array\n\nrequired\n\n\ngeometry\nshapely.shapely.geometry.shapely.geometry.Polygon\n\nrequired"
  },
  {
    "objectID": "reference/possibly_intersecting.html#parameters",
    "href": "reference/possibly_intersecting.html#parameters",
    "title": "possibly_intersecting",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndataframebounds\nnumpy.numpy.array\n\nrequired\n\n\ngeometry\nshapely.shapely.geometry.shapely.geometry.Polygon\n\nrequired"
  },
  {
    "objectID": "reference/add_styles_to_geopackage.html",
    "href": "reference/add_styles_to_geopackage.html",
    "title": "add_styles_to_geopackage",
    "section": "",
    "text": "add_styles_to_geopackage(gpkg_path)\nAdd styles to a HyDAMO GeoPackage\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ngpkg_path\npathlib.Path\nPath to HyDAMO GeoPackage\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone."
  },
  {
    "objectID": "reference/add_styles_to_geopackage.html#parameters",
    "href": "reference/add_styles_to_geopackage.html#parameters",
    "title": "add_styles_to_geopackage",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ngpkg_path\npathlib.Path\nPath to HyDAMO GeoPackage\nrequired"
  },
  {
    "objectID": "reference/add_styles_to_geopackage.html#returns",
    "href": "reference/add_styles_to_geopackage.html#returns",
    "title": "add_styles_to_geopackage",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nNone."
  },
  {
    "objectID": "reference/read_style.html",
    "href": "reference/read_style.html",
    "title": "read_style",
    "section": "",
    "text": "read_style(style_path)\nTo make style-text sql-compatible, we need to replace single ’ to ’‘. Example ’http://mrcc.com/qgis.dtd -&gt;’‘http://mrcc.com/qgis.dtd’’\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstyle_path\npathlib.Path\nPath to sld-file\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstr\nstyle-string for SQL"
  },
  {
    "objectID": "reference/read_style.html#parameters",
    "href": "reference/read_style.html#parameters",
    "title": "read_style",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstyle_path\npathlib.Path\nPath to sld-file\nrequired"
  },
  {
    "objectID": "reference/read_style.html#returns",
    "href": "reference/read_style.html#returns",
    "title": "read_style",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nstr\nstyle-string for SQL"
  },
  {
    "objectID": "reference/HyDAMO.html",
    "href": "reference/HyDAMO.html",
    "title": "HyDAMO",
    "section": "",
    "text": "HyDAMO\nHyDAMO(self, version='2.2', schemas_path=SCHEMAS_DIR, ignored_layers=['afvoeraanvoergebied', 'imwa_geoobject', 'leggerwatersysteem', 'leggerwaterveiligheid', 'waterbeheergebied'])\nDefinition of the HyDAMO datamodel."
  },
  {
    "objectID": "reference/find_nearest_branch.html",
    "href": "reference/find_nearest_branch.html",
    "title": "find_nearest_branch",
    "section": "",
    "text": "find_nearest_branch(branches, geometries, method='overall', maxdist=5)\nDetermine nearest branch for each geometry.\nThe nearest branch can be found by finding t from both ends (ends) or the nearest branch from the geometry as a whole (overall), the centroid (centroid), or intersecting (intersect).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nbranches\ngeopandas.geopandas.GeoDataFrame\nGeodataframe with branches\nrequired\n\n\ngeometries\ngeopandas.geopandas.GeoDataFrame\nGeodataframe with geometries to snap\nrequired\n\n\nmethod\n\nMethod for determine branch\n'overall'\n\n\nmaxdist\n\nMaximum distance for finding nearest geometry\n5\n\n\nminoffset\nint or float\nMinimum offset from the end of the corresponding branch in case of method=equal\nrequired"
  },
  {
    "objectID": "reference/find_nearest_branch.html#parameters",
    "href": "reference/find_nearest_branch.html#parameters",
    "title": "find_nearest_branch",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nbranches\ngeopandas.geopandas.GeoDataFrame\nGeodataframe with branches\nrequired\n\n\ngeometries\ngeopandas.geopandas.GeoDataFrame\nGeodataframe with geometries to snap\nrequired\n\n\nmethod\n\nMethod for determine branch\n'overall'\n\n\nmaxdist\n\nMaximum distance for finding nearest geometry\n5\n\n\nminoffset\nint or float\nMinimum offset from the end of the corresponding branch in case of method=equal\nrequired"
  },
  {
    "objectID": "reference/CloudStorage.html",
    "href": "reference/CloudStorage.html",
    "title": "CloudStorage",
    "section": "",
    "text": "CloudStorage\nCloudStorage(self, data_dir=RIBASIM_NL_DATA_DIR, user=RIBASIM_NL_CLOUD_USER, url=BASE_URL, password=RIBASIM_NL_CLOUD_PASS)\nConnect a local ’data_dir` to cloud-storage."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "The HyDAMO class represents the HyDAMO data model.\n\n\n\nHyDAMO\nDefinition of the HyDAMO datamodel.\n\n\nExtendedGeoDataFrame\nA GeoPandas GeoDataFrame with extended properties and methods.\n\n\nfind_nearest_branch\nDetermine nearest branch for each geometry.\n\n\npossibly_intersecting\nEfficiently determine possibly intersecting geometries using a bounding box.\n\n\nadd_styles_to_geopackage\nAdd styles to a HyDAMO GeoPackage\n\n\nread_style\nTo make style-text sql-compatible, we need to replace single ’ to ’’.\n\n\n\n\n\n\nRibasim-NL code.\n\n\n\nCloudStorage\nConnect a local ’data_dir` to cloud-storage."
  },
  {
    "objectID": "reference/index.html#hydamo",
    "href": "reference/index.html#hydamo",
    "title": "API Reference",
    "section": "",
    "text": "The HyDAMO class represents the HyDAMO data model.\n\n\n\nHyDAMO\nDefinition of the HyDAMO datamodel.\n\n\nExtendedGeoDataFrame\nA GeoPandas GeoDataFrame with extended properties and methods.\n\n\nfind_nearest_branch\nDetermine nearest branch for each geometry.\n\n\npossibly_intersecting\nEfficiently determine possibly intersecting geometries using a bounding box.\n\n\nadd_styles_to_geopackage\nAdd styles to a HyDAMO GeoPackage\n\n\nread_style\nTo make style-text sql-compatible, we need to replace single ’ to ’’."
  },
  {
    "objectID": "reference/index.html#ribasim-nl",
    "href": "reference/index.html#ribasim-nl",
    "title": "API Reference",
    "section": "",
    "text": "Ribasim-NL code.\n\n\n\nCloudStorage\nConnect a local ’data_dir` to cloud-storage."
  },
  {
    "objectID": "reference/ExtendedGeoDataFrame.html",
    "href": "reference/ExtendedGeoDataFrame.html",
    "title": "ExtendedGeoDataFrame",
    "section": "",
    "text": "ExtendedGeoDataFrame\nExtendedGeoDataFrame(self, validation_schema, geotype, layer_name='', required_columns=[], logger=logging, *args, **kwargs)\nA GeoPandas GeoDataFrame with extended properties and methods."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ribasim-NL",
    "section": "",
    "text": "Ribasim-NL facilitates Ribasim water resources modeling in the Netherlands. For more informantion on Ribasim itself please see the Ribasim documentation."
  }
]